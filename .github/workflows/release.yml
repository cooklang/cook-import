name: Release
on:
  push:
    tags:
      - '*'


jobs:
  build_linux:
    if: ${{ false }}
    name: Build Linux binary
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.9.0"
      POETRY_VERSION: "1.1.11"

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Run image
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: View poetry --help
        run: poetry --help

      - name: Install dependencies
        run: poetry install

      - name: Build binary
        run: poetry run pyinstaller cook-import.spec

      - name: Get tag/branch name
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Tar files
        run: tar -czvf cook-import_${{ steps.vars.outputs.tag }}_linux_amd64.tar.gz ./dist/cook-import


      - name: Upload Linux binary
        uses: actions/upload-artifact@v2
        with:
          path: "*.tar.gz"
          name: Linux Binary

      - name: Create Release (on Tag only)
        id: create_release
        uses: ncipollo/release-action@v1
        if: contains(github.ref, 'refs/tags/')
        with:
          tag: ${{ github.ref }}
          name: ${{ steps.vars.outputs.tag }}
          draft: true
          prerelease: true
          allowUpdates: true
          omitNameDuringUpdate: true
          replacesArtifacts: true
          artifacts: "*.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}

  build_macos:
    name: Build macOS binary
    runs-on: macos-10.15
    env:
      # SIGNING_AUTH: ${{ secrets.SIGNING_AUTH }}
      # NOTARIZATION_USER: ${{ secrets.NOTARIZATION_USER }}
      # NOTARIZATION_PASS: ${{ secrets.NOTARIZATION_PASS }}
      # AUTOMATION_GITHUB_TOKEN: ${{ secrets.AUTOMATION_GITHUB_TOKEN }}
      # # We need the official Python, because the GA ones only support newer macOS versions
      # # The deployment target is picked up by the Python build tools automatically
      # # If updated, make sure to also set LSMinimumSystemVersion in SABnzbd.spec
      PYTHON_VERSION: "3.10.2"
      POETRY_VERSION: "1.1.11"
      MACOSX_DEPLOYMENT_TARGET: "10.9"
      # We need to force compile for universal2 support
      CFLAGS: -arch arm64 -arch x86_64

    steps:
      - uses: actions/checkout@v2
      - name: Cache Python download
        id: cache-python-download
        uses: actions/cache@v2
        with:
          path: ~/python.pkg
          key: macOS-Python-${{ env.PYTHON_VERSION }}
      - name: Get Python
        if: steps.cache-python-download.outputs.cache-hit != 'true'
        run: curl https://www.python.org/ftp/python/${PYTHON_VERSION}/python-${PYTHON_VERSION}-macos11.pkg -o ~/python.pkg
      - name: Install Python
        run: |
          sudo installer -pkg ~/python.pkg -target /
          unlink /usr/local/bin/python
          ln -s /usr/local/bin/python3 /usr/local/bin/python
      - name: Cache Python virtualenv
        uses: syphar/restore-virtualenv@v1.2
        id: cache-virtualenv
        with:
          custom_cache_key_element: "release"
          requirement_files: |
            requirements.txt
            PKG-INFO
      - name: Install Python dependencies
        # We have to manually install a few packages:
        # 1.  cffi will pick up the single-arch libffi from Homebrew, while Apple provides universal2-version
        #     of libffi with XCode. So we forcefully have to remove the Homebrew one.
        # 2.  Because building cryptography is hard, and we cannot force pip to fetch universal2 version we
        #     first install the x86 version (and it's dependencies) and then manually fetch the universal2 build
        #     https://github.com/pyca/cryptography/issues/5918
        # 3.  We need to build the PyInstaller bootloader from sources:
        #     https://github.com/pyinstaller/pyinstaller/issues/6235
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: |
          python3 --version
          pip3 install --upgrade pip wheel

          brew uninstall libffi --ignore-dependencies
          ARCHFLAGS="-arch x86_64 -arch arm64" pip3 install --upgrade cffi --no-binary cffi
          pip3 install --upgrade -r requirements.txt

          PYINSTALLER_COMPILE_BOOTLOADER=1 pip3 install --upgrade -r requirements.txt --no-binary pyinstaller

      - name: Build binary
        run: pyinstaller cook-import.spec

      - name: Import macOS codesign certificates
        uses: apple-actions/import-codesign-certs@v1
        if: env.SIGNING_AUTH
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
      - name: Upload macOS binary
        uses: actions/upload-artifact@v2
        with:
          path: "*-osx.dmg"
          name: macOS binary (not notarized)
      - name: Prepare official release
        if: env.AUTOMATION_GITHUB_TOKEN && startsWith(github.ref, 'refs/tags/')
        run: python3 builder/package.py release
